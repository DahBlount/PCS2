
include(CheckCXXCompilerFlag)

MESSAGE(STATUS "Doing configuration specific to visual studio...")

set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug)

option(MSVC_USE_RUNTIME_DLL "Use the dynamically linked version of the runtime" OFF)
MARK_AS_ADVANCED(FORCE MSVC_USE_RUNTIME_DLL)

# Base
set(CMAKE_C_FLAGS "/MP /GS- /analyze- /Zc:wchar_t /errorReport:prompt /WX- /Zc:forScope /Gd /EHsc /nologo")
set(CMAKE_CXX_FLAGS "/MP /GS- /analyze- /Zc:wchar_t /errorReport:prompt /WX- /Zc:forScope /Gd /EHsc /nologo")

set(CMAKE_EXE_LINKER_FLAGS "/MANIFEST /DYNAMICBASE:NO /SAFESEH:NO /ERRORREPORT:PROMPT /NOLOGO")
set(CMAKE_STATIC_LINKER_FLAGS "")

# Release
set(CMAKE_C_FLAGS_RELEASE "/GL /W2 /Gy- /Ox /Ot /Ob2 /fp:precise /GF /Oy /Oi /Zi /W3")
set(CMAKE_CXX_FLAGS_RELEASE "/GL /W2 /Gy- /Ox /Ot /Ob2 /fp:precise /GF /Oy /Oi /Zi /W3")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/OPT:REF /LTCG /INCREMENTAL:NO")
set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "/LTCG")

CHECK_CXX_COMPILER_FLAG("/Zo" MSVC_COMPILER_SUPPORTS_ARCH_ZO)

if (MSVC_COMPILER_SUPPORTS_ARCH_ZO)
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zo")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zo")
endif()

IF(MSVC_USE_RUNTIME_DLL)
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
ELSE(MSVC_USE_RUNTIME_DLL)
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
ENDIF(MSVC_USE_RUNTIME_DLL)

# Debug
set(CMAKE_C_FLAGS_DEBUG "/W4 /Gy /Zi /Od /RTC1 /Gd /Oy-")
set(CMAKE_CXX_FLAGS_DEBUG "/W4 /Gy /Zi /Od /RTC1 /Gd /Oy-")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG /INCREMENTAL:NO /MAPINFO:EXPORTS /NODEFAULTLIB:libcmt.lib")

IF(MSVC_USE_RUNTIME_DLL)
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MDd")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
ELSE(MSVC_USE_RUNTIME_DLL)
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
ENDIF(MSVC_USE_RUNTIME_DLL)

INCLUDE(MSVCMultipleProcessCompile)

LIST(FIND POSSIBLE_INSTUCTION_SETS "${FSO_INSTRUCTION_SET}" SET_INDEX)

IF (NOT SET_INDEX EQUAL 0)
	SET(FOUND)

	FOREACH(list_index RANGE SET_INDEX 1)
		CHECK_CXX_COMPILER_FLAG("/arch:${FSO_INSTRUCTION_SET}" COMPILER_SUPPORTS_ARCH_${FSO_INSTRUCTION_SET})

		IF(COMPILER_SUPPORTS_ARCH_${FSO_INSTRUCTION_SET})
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:${FSO_INSTRUCTION_SET}")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:${FSO_INSTRUCTION_SET}")

			SET(FOUND TRUE)
			BREAK()
		ENDIF(COMPILER_SUPPORTS_ARCH_${FSO_INSTRUCTION_SET})
	ENDFOREACH(list_index)

	IF(NOT FOUND)
		# Don't set anything, it will likely not work
		MESSAGE(STATUS "Your compiler does not support any optimization flags, defaulting to none")
	ENDIF(NOT FOUND)
ELSE(NOT SET_INDEX EQUAL 0)
	CHECK_CXX_COMPILER_FLAG("/arch:IA32" COMPILER_SUPPORTS_ARCH_IA32)

	IF(COMPILER_SUPPORTS_ARCH_IA32)
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:IA32")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:IA32")
	ENDIF(COMPILER_SUPPORTS_ARCH_IA32)
ENDIF(NOT SET_INDEX EQUAL 0)

target_compile_definitions(compiler INTERFACE _CRT_SECURE_NO_DEPRECATE
	_CRT_SECURE_NO_WARNINGS _SECURE_SCL=0 NOMINMAX)
